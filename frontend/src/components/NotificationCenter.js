// NotificationCenter.js
import React from 'react';
import { useNotificationContext } from '../context/NotificationContext';
// –ï—Å–ª–∏ –±—É–¥–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–∫–æ–Ω–∫–∏ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, react-icons
import { FaBell, FaCheck, FaTrashAlt, FaEnvelopeOpen, FaEnvelope } from 'react-icons/fa'; 

const NotificationCenter = () => {
  const {
    notifications,
    unreadCount,
    loading,
    error,
    isOpen,
    setIsOpen,
    markAsRead,
    markAllAsRead,
    deleteNotification
  } = useNotificationContext();

  const getNotificationIcon = (message) => {
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    // –¢—ã –º–æ–∂–µ—à—å —Ä–∞—Å—à–∏—Ä–∏—Ç—å —ç—Ç–æ –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ç–∏–ø –∏–∫–æ–Ω–∫–∏ —Å –±—ç–∫–µ–Ω–¥–∞
    if (message.toLowerCase().includes('goal') || message.toLowerCase().includes('—Ü–µ–ª')) {
      return <FaBell style={{ color: '#ffc107', marginRight: '8px' }} />; // –ü—Ä–∏–º–µ—Ä –∏–∫–æ–Ω–∫–∏ —Ü–µ–ª–∏ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ç–≤–æ—é üéØ)
    }
    // –î–æ–±–∞–≤—å –¥—Ä—É–≥–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    return <FaEnvelope style={{ color: '#17a2b8', marginRight: '8px' }} />; // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∏–∫–æ–Ω–∫–∞
  };


  return (
    <div className="notification-center">
      <button
        className="notification-toggle"
        onClick={() => setIsOpen(!isOpen)}
        title="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" // –î–æ–±–∞–≤–∏–º title –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
      >
        <FaBell /> {/* –ò–∫–æ–Ω–∫–∞ –∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫–∞ */}
        {unreadCount > 0 && <span className="notification-badge">{unreadCount}</span>}
      </button>

      {/* –î–æ–±–∞–≤–∏–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏, –µ—Å–ª–∏ –±—É–¥–µ—à—å –µ–µ –¥–µ–ª–∞—Ç—å */}
      {isOpen && (
        <div className="notification-panel"> {/* –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å 'open' –∏–ª–∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–Ω–∏–º–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ React Transition Group */}
          <div className="notification-header">
            <h3>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
            {notifications.length > 0 && unreadCount > 0 && ( // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –ø–æ–º–µ—á–∞—Ç—å
              <button
                className="mark-all-read-btn" // –ò–∑–º–µ–Ω–∏–º –∫–ª–∞—Å—Å –¥–ª—è –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
                onClick={markAllAsRead}
                title="–û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ"
              >
                <FaEnvelopeOpen /> {/* –ò–∫–æ–Ω–∫–∞ "–≤—Å–µ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã" */}
                <span>–û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ</span> {/* –¢–µ–∫—Å—Ç –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å */}
              </button>
            )}
          </div>

          <div className="notification-list">
            {loading ? (
              <p className="notification-message-info">–ó–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...</p>
            ) : error ? (
              <p className="notification-message-error">{error}</p>
            ) : notifications.length === 0 ? (
              <p className="notification-message-info">–ù–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>
            ) : (
              notifications.map(notification => (
                <div
                  key={notification.id}
                  className={`notification-item ${!notification.is_read ? 'unread' : ''}`}
                >
                  <div className="notification-item-main">
                    <span className="notification-item-icon">
                      {/* –¢—É—Ç —Ç–≤–æ—è –∏–∫–æ–Ω–∫–∞ üéØ –∏–ª–∏ –≤—ã–∑–æ–≤ getNotificationIcon(notification.message) */}
                      {/* –ü—Ä–∏–º–µ—Ä —Å —Ç–≤–æ–µ–π –∏–∫–æ–Ω–∫–æ–π, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ message –∏–ª–∏ –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ */}
                      {notification.message.startsWith('üéØ') ? 'üéØ' : getNotificationIcon(notification.message)}
                    </span>
                    <div className="notification-content">
                      <p dangerouslySetInnerHTML={{ __html: notification.message.replace(/^üéØ\s*/, '') }}></p> {/* –£–¥–∞–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ —Ç–∞–º –µ—Å—Ç—å */}
                      <span className="notification-date">
                        {new Date(notification.created_at).toLocaleString([], { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' })}
                      </span>
                    </div>
                  </div>
                  <div className="notification-actions">
                    {!notification.is_read && (
                      <button
                        onClick={() => markAsRead(notification.id)}
                        className="action-btn mark-read-btn"
                        title="–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ"
                      >
                        <FaCheck />
                      </button>
                    )}
                    <button
                      onClick={() => deleteNotification(notification.id)}
                      className="action-btn delete-notification-btn"
                      title="–£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
                    >
                      <FaTrashAlt />
                    </button>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default NotificationCenter;